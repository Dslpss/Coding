"use client";

import { useState, useEffect } from "react";
import { useAuthState } from "react-firebase-hooks/auth";
import { auth, db } from "@/lib/firebase";
import {
  collection,
  doc,
  getDoc,
  getDocs,
  query,
  limit,
  orderBy,
  startAfter,
  where,
  DocumentData,
  QueryDocumentSnapshot,
  Timestamp,
  updateDoc,
  deleteDoc,
} from "firebase/firestore";
import { FaUser, FaSearch } from "react-icons/fa";
import Image from "next/image";
import AlertBanner from "../components/AlertBanner";
import { checkAdminStatus } from "../utils/adminUtils";

interface User {
  id: string;
  displayName: string;
  email: string;
  photoURL?: string;
  createdAt?: Timestamp;
  lastLogin?: Timestamp;
  isAdmin?: boolean;
  matriculas?: number;
  status?: "active" | "inactive" | "banned";
}

export default function AdminUsuarios() {
  const [user] = useAuthState(auth);
  const [users, setUsers] = useState<User[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [isAdmin, setIsAdmin] = useState(false);
  const [searchTerm, setSearchTerm] = useState("");
  const [lastVisible, setLastVisible] = useState<QueryDocumentSnapshot<DocumentData> | null>(null);
  const [hasMore, setHasMore] = useState(true);

  // Verificar status de admin e buscar usuários
  useEffect(() => {
    const initialize = async () => {
      if (!user?.email) {
        setLoading(false);
        return;
      }

      try {
        console.log("Verificando status de admin para:", user.email);
        const adminStatus = await checkAdminStatus(user.email);
        console.log("Status de admin recebido:", adminStatus);
        
        setIsAdmin(adminStatus);

        if (adminStatus) {
          await fetchUsers();
        } else {
          setError("Você não tem permissões de administrador para visualizar usuários");
          setLoading(false);
        }
      } catch (err) {
        console.error("Erro na inicialização:", err);
        setError("Erro ao verificar permissões de administrador");
        setLoading(false);
      }
    };

    initialize();
  }, [user]);

  // Buscar usuários
  const fetchUsers = async (startAfterDoc = null) => {
    if (!isAdmin) {
      console.log("Tentativa de buscar usuários sem ser admin");
      return;
    }

    try {
      console.log("Iniciando busca de usuários...");
      let usersQuery;

      if (startAfterDoc) {
        usersQuery = query(
          collection(db, "users"),
          orderBy("email"),
          startAfter(startAfterDoc),
          limit(10)
        );
      } else {
        usersQuery = query(
          collection(db, "users"),
          orderBy("email"),
          limit(10)
        );
      }

      const usersSnapshot = await getDocs(usersQuery);
      console.log("Usuários encontrados:", usersSnapshot.size);

      if (usersSnapshot.empty) {
        setHasMore(false);
        if (!startAfterDoc) {
          setUsers([]);
        }
        return;
      }

      setLastVisible(usersSnapshot.docs[usersSnapshot.docs.length - 1]);

      const usersList = usersSnapshot.docs.map((doc) => {
        const data = doc.data();
        return {
          id: doc.id,
          displayName: data.displayName || "Usuário sem nome",
          email: data.email || "Sem e-mail",
          photoURL: data.photoURL,
          createdAt: data.createdAt,
          lastLogin: data.lastLogin,
          status: data.status || "active",
          matriculas: data.matriculas || 0,
        };
      });

      if (startAfterDoc) {
        setUsers((prev) => [...prev, ...usersList]);
      } else {
        setUsers(usersList);
      }
    } catch (err: any) {
      console.error("Erro ao buscar usuários:", err);
      setError("Erro ao carregar usuários: " + err.message);
    } finally {
      setLoading(false);
    }
  };

  // Atualizar status do usuário
  const updateUserStatus = async (userId: string, status: "active" | "inactive" | "banned") => {
    if (!isAdmin) return;

    try {
      await updateDoc(doc(db, "users", userId), {
        status: status,
        updatedAt: new Date(),
      });

      setUsers(users.map((u) => 
        u.id === userId ? { ...u, status: status } : u
      ));

      setError(null);
    } catch (err: any) {
      console.error("Erro ao atualizar status:", err);
      setError("Erro ao atualizar status: " + err.message);
    }
  };

  // Excluir usuário
  const handleDelete = async (userId: string, userName: string) => {
    if (!isAdmin) return;
    
    if (!confirm(`Tem certeza que deseja excluir o usuário ${userName}?`)) {
      return;
    }

    try {
      await deleteDoc(doc(db, "users", userId));
      setUsers(users.filter(u => u.id !== userId));
      setError(null);
    } catch (err: any) {
      console.error("Erro ao excluir usuário:", err);
      setError("Erro ao excluir usuário: " + err.message);
    }
  };

  // Carregar mais usuários
  const loadMoreUsers = () => {
    if (!hasMore || loading) return;
    fetchUsers(lastVisible);
  };

  // Pesquisar usuários
  const searchUsers = async () => {
    if (!searchTerm.trim() || !isAdmin) return;

    setLoading(true);
    try {
      const emailQuery = query(
        collection(db, "users"),
        where("email", "==", searchTerm.trim())
      );

      const nameQuery = query(
        collection(db, "users"),
        where("displayName", "==", searchTerm.trim())
      );

      const [emailSnapshot, nameSnapshot] = await Promise.all([
        getDocs(emailQuery),
        getDocs(nameQuery),
      ]);

      const results = new Map();

      emailSnapshot.docs.forEach((doc) => {
        const data = doc.data();
        results.set(doc.id, {
          id: doc.id,
          displayName: data.displayName || "Usuário sem nome",
          email: data.email || "Sem e-mail",
          photoURL: data.photoURL,
          createdAt: data.createdAt,
          lastLogin: data.lastLogin,
          status: data.status || "active",
        });
      });

      nameSnapshot.docs.forEach((doc) => {
        if (!results.has(doc.id)) {
          const data = doc.data();
          results.set(doc.id, {
            id: doc.id,
            displayName: data.displayName || "Usuário sem nome",
            email: data.email || "Sem e-mail",
            photoURL: data.photoURL,
            createdAt: data.createdAt,
            lastLogin: data.lastLogin,
            status: data.status || "active",
          });
        }
      });

      setUsers(Array.from(results.values()));
      setHasMore(false);
    } catch (err: any) {
      console.error("Erro na pesquisa:", err);
      setError("Erro ao pesquisar usuários: " + err.message);
    } finally {
      setLoading(false);
    }
  };

  // Limpar pesquisa
  const clearSearch = () => {
    setSearchTerm("");
    setUsers([]);
    setHasMore(true);
    fetchUsers();
  };

  if (!user) {
    return (
      <div className="p-8">
        <AlertBanner
          type="warning"
          message="Você precisa estar logado para acessar esta página."
        />
      </div>
    );
  }

  return (
    <div className="w-full">
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-2xl font-bold text-gray-800">
          Gerenciamento de Usuários
        </h1>
      </div>

      {!isAdmin && (
        <AlertBanner
          type="error"
          message="Você não tem permissões de administrador para gerenciar usuários."
        />
      )}

      {error && (
        <AlertBanner
          type="error"
          message={error}
          onClose={() => setError(null)}
        />
      )}

      {isAdmin && (
        <>
          {/* Barra de pesquisa */}
          <div className="bg-white p-4 rounded-lg shadow-md mb-6">
            <div className="flex gap-4 items-center">
              <div className="flex-1">
                <div className="relative">
                  <input
                    type="text"
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                    onKeyPress={(e) => e.key === "Enter" && searchUsers()}
                    placeholder="Buscar por nome ou email..."
                    className="w-full px-4 py-2 border rounded-lg pr-10"
                  />
                  <button
                    onClick={searchUsers}
                    className="absolute right-2 top-1/2 -translate-y-1/2 text-gray-500 hover:text-gray-700"
                  >
                    <FaSearch />
                  </button>
                </div>
              </div>
              {searchTerm && (
                <button
                  onClick={clearSearch}
                  className="px-4 py-2 text-gray-600 hover:text-gray-800"
                >
                  Limpar busca
                </button>
              )}
            </div>
          </div>

          {/* Lista de usuários */}
          <div className="bg-white rounded-lg shadow-md">
            {loading ? (
              <div className="flex justify-center items-center p-8">
                <div className="w-8 h-8 border-4 border-blue-500 border-t-transparent rounded-full animate-spin"></div>
              </div>
            ) : users.length === 0 ? (
              <div className="text-center py-8 text-gray-500">
                Nenhum usuário encontrado
              </div>
            ) : (
              <>
                <div className="overflow-x-auto">
                  <table className="min-w-full">
                    <thead>
                      <tr className="bg-gray-50 border-b">
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                          Usuário
                        </th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                          Email
                        </th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                          Status
                        </th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                          Cadastro
                        </th>
                        <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                          Ações
                        </th>
                      </tr>
                    </thead>
                    <tbody className="bg-white divide-y divide-gray-200">
                      {users.map((user) => (
                        <tr key={user.id} className="hover:bg-gray-50">
                          <td className="px-6 py-4 whitespace-nowrap">
                            <div className="flex items-center">
                              <div className="flex-shrink-0 h-10 w-10">
                                {user.photoURL ? (
                                  <Image
                                    width={40}
                                    height={40}
                                    className="h-10 w-10 rounded-full object-cover"
                                    src={user.photoURL}
                                    alt={`Foto de ${user.displayName || "usuário"}`}
                                  />
                                ) : (
                                  <div className="h-10 w-10 rounded-full bg-gray-200 flex items-center justify-center">
                                    <FaUser className="text-gray-500" />
                                  </div>
                                )}
                              </div>
                              <div className="ml-4">
                                <div className="text-sm font-medium text-gray-900">
                                  {user.displayName || "Sem nome"}
                                </div>
                              </div>
                            </div>
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap">
                            <div className="text-sm text-gray-900">
                              {user.email}
                            </div>
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap">
                            <span
                              className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full 
                                ${
                                  user.status === "active"
                                    ? "bg-green-100 text-green-800"
                                    : user.status === "inactive"
                                    ? "bg-gray-100 text-gray-800"
                                    : "bg-red-100 text-red-800"
                                }`}
                            >
                              {user.status === "active"
                                ? "Ativo"
                                : user.status === "inactive"
                                ? "Inativo"
                                : "Bloqueado"}
                            </span>
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                            {user.createdAt
                              ? new Date(user.createdAt.seconds * 1000).toLocaleDateString("pt-BR")
                              : "N/A"}
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                            <button
                              onClick={() => updateUserStatus(user.id, user.status === "active" ? "inactive" : "active")}
                              className={`text-sm mr-3 ${
                                user.status === "active"
                                  ? "text-red-600 hover:text-red-900"
                                  : "text-green-600 hover:text-green-900"
                              }`}
                            >
                              {user.status === "active" ? "Desativar" : "Ativar"}
                            </button>
                            <button
                              onClick={() => handleDelete(user.id, user.displayName)}
                              className="text-red-600 hover:text-red-900 text-sm"
                            >
                              Excluir
                            </button>
                          </td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>

                {hasMore && (
                  <div className="px-6 py-4 border-t">
                    <button
                      onClick={loadMoreUsers}
                      disabled={loading}
                      className="w-full px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none"
                    >
                      {loading ? "Carregando..." : "Carregar mais"}
                    </button>
                  </div>
                )}
              </>
            )}
          </div>
        </>
      )}
    </div>
  );
}

import { auth, db } from "@/lib/firebase";
import { signInWithEmailAndPassword, signOut } from "firebase/auth";
import { doc, getDoc } from "firebase/firestore";

// Lista de emails de admin (mais simples para come√ßar)
const ADMIN_EMAILS = [
  "danilospineli@gmail.com", // Seu email principal
  "dennisemannuel93@gmail.com", // Admin encontrado no Firestore
  "admin@exemplo.com"
];

interface AdminSession {
  email: string;
  isAuthenticated: boolean;
  timestamp: number;
}

class SimpleAdminAuth {
  private session: AdminSession | null = null;

  constructor() {
    this.loadSession();
  }
  // Verificar se email √© admin
  isAdminEmail(email: string): boolean {
    console.log(`üîç Verificando se ${email} √© um email admin...`);
    console.log(`üìã Lista de emails admin:`, ADMIN_EMAILS);
    const isAdmin = ADMIN_EMAILS.includes(email.toLowerCase());
    console.log(`üéØ Resultado: ${isAdmin ? '√â admin' : 'N√£o √© admin'}`);
    return isAdmin;
  }

  // Login de admin
  async loginAdmin(email: string, password: string): Promise<void> {
    try {
      console.log("üîê Fazendo login para:", email);

      // Verificar se √© email de admin
      if (!this.isAdminEmail(email)) {
        throw new Error("Usu√°rio n√£o √© administrador");
      }      // Fazer login no Firebase
      await signInWithEmailAndPassword(auth, email, password);
      console.log("‚úÖ Login Firebase bem-sucedido");

      // Criar sess√£o admin
      this.session = {
        email: email,
        isAuthenticated: true,
        timestamp: Date.now()
      };

      // Salvar sess√£o
      this.saveSession();
      console.log("‚úÖ Sess√£o admin criada");
    } catch (error) {
      console.error("‚ùå Erro no login admin:", error);
      throw error;
    }
  }
  // Verificar se est√° autenticado como admin
  isAuthenticated(): boolean {
    console.log(`üîê Verificando autentica√ß√£o admin...`);
    
    if (!this.session) {
      console.log(`‚ùå Sem sess√£o admin dispon√≠vel`);
      return false;
    }

    console.log(`üë§ Sess√£o encontrada para:`, this.session.email);
    
    // Verificar se a sess√£o n√£o expirou (8 horas)
    const now = Date.now();
    const maxAge = 8 * 60 * 60 * 1000; // 8 horas
    const sessionAge = now - this.session.timestamp;
    
    if (sessionAge > maxAge) {
      console.log(`‚è∞ Sess√£o expirada (${Math.round(sessionAge / 60000)} minutos), fazendo logout...`);
      this.logout();
      return false;
    }

    console.log(`‚úÖ Sess√£o v√°lida (criada h√° ${Math.round(sessionAge / 60000)} minutos)`);
    return this.session.isAuthenticated;
  }

  // Obter dados da sess√£o
  getSession(): AdminSession | null {
    return this.session;
  }

  // Logout
  async logout(): Promise<void> {
    try {
      // Fazer logout do Firebase
      await signOut(auth);
      
      // Limpar sess√£o local
      this.session = null;
      localStorage.removeItem("adminSession");
      
      console.log("‚úÖ Logout admin bem-sucedido");
    } catch (error) {
      console.error("‚ùå Erro no logout:", error);
    }
  }
  // Salvar sess√£o no localStorage
  private saveSession(): void {
    if (this.session) {
      console.log(`üíæ Salvando sess√£o admin para:`, this.session.email);
      try {
        localStorage.setItem("adminSession", JSON.stringify(this.session));
        console.log(`‚úÖ Sess√£o admin salva com sucesso!`);
      } catch (error) {
        console.error(`‚ùå Erro ao salvar sess√£o:`, error);
      }
    }
  }

  // Carregar sess√£o do localStorage  private loadSession(): void {
    // Verificar se estamos no navegador (n√£o no servidor)
    if (typeof window === 'undefined') {
      console.log('‚ö†Ô∏è Executando no servidor, ignorando localStorage');
      return;
    }
    
    try {
      console.log(`üîç Tentando carregar sess√£o admin do localStorage...`);
      const stored = localStorage.getItem("adminSession");
      
      if (stored) {
        console.log(`üì¶ Dados encontrados no localStorage`);
        this.session = JSON.parse(stored);
        console.log(`üë§ Sess√£o admin carregada para:`, this.session?.email);
        
        // Verificar se a sess√£o n√£o expirou
        const now = Date.now();
        const maxAge = 8 * 60 * 60 * 1000; // 8 horas
        
        if (now - this.session.timestamp > maxAge) {
          console.log(`‚è∞ Sess√£o expirada (${Math.round((now - this.session.timestamp) / 60000)} minutos), removendo...`);
          localStorage.removeItem("adminSession");
          this.session = null;
        } else {
          console.log(`‚úÖ Sess√£o v√°lida (criada h√° ${Math.round((now - this.session.timestamp) / 60000)} minutos)`);
        }
      } else {
        console.log(`‚ùå Nenhuma sess√£o encontrada no localStorage`);
      }
    } catch (error) {
      console.error(`‚ùå Erro ao carregar sess√£o:`, error);
      localStorage.removeItem("adminSession");
    }
  }
}

// Inst√¢ncia singleton
const simpleAdminAuth = new SimpleAdminAuth();

export { simpleAdminAuth };
export default simpleAdminAuth;
